// HOCON syntax: https://github.com/typesafehub/config/blob/master/HOCON.md

cheesecake.services: [
    {
        name: nginx
        endpoints: [

            // default endpoint keys
            {
                // only the "http" type currenly supported
                type: http
                host: localhost
                port: 80
                // path to check
                path: /
            }

            // so simply some keys may be omitted
            {
                port: 8080
                path: /status
            }

            // ip http endpoint (DNS resolving not used)
            {
                type: http
                ip: 127.0.0.1
            }

            // symbolic http endpoint (DNS resolving used for every check)
            {
                type: http
                host: example.com
            }

            // all http endpoint params
            {
                type: http
                // ip: 127.0.0.1
                host: localhost
                path: "/some/path?with_arguments=%2Fquoted%2F"
                headers: {"X-Checker": "cheesecake", "Accept": "application/json"}

            }
        ]
    }

    // body parser examples
    {
        name: body parser examples
        endpoints: [

            // available parser types:
            //  * text - all endpoint output
            //  * regexp - doing regexp on result (multiline mode), save first matching group
            //  * json - JSONPath (http://goessner.net/articles/JsonPath/)
            //  * xml - XPath

            {
                port: 52030
                path: /text/simple
                body_parsers: {
                    // parser key: { parser options }
                    simple_status: { type: text }
                }
            }


            {
                port: 52030
                path: /text/pi
                body_parsers: {
                    pi: {
                        type: regexp
                        // flags: m - multiline, s - dot match new lines, ...
                        pattern: "(?m)^pi: [\\d\\.]+$"  // use full matched result
                    }
                }
            }

            {
                port: 52030
                path: /text/formatted
                body_parsers: {
                    version: {
                        type: regexp
                        pattern: "(?m)^version: ([\\d\\.]+) *$"  // use result from the first matched group
                    }
                    status: {
                        type: regexp
                        pattern: "(?m)^current status: (.*)$"
                    }
                }
            }


            {
                port: 52030
                path: /json/simple
                body_parsers: {
                    status: {
                        type: json
                        // JSONPath, some advanced syntax may not supported
                        // result should be JSON string or number
                        json_path: "$.status"
                    }
                    "pi rounded": {
                        type: json
                        json_path: "$.pi[0]"
                    }
                    pi: {
                        type: json
                        json_path: "$.pi[1]"
                    }
                }
            }

            {
                port: 52030
                path: /xml
                body_parsers: {
                    mylib_type: {
                        type: xml
                        // XPath (relative to root node)
                        // result should be text node or attribute
                        xpath: "mylib/@type"
                    }
                    python_version: {
                        type: xml
                        // or absolute
                        xpath: "//versions/tornado"
                    }
                }
            }
        ]
    }
    // other services
    {
        name: myapp
        endpoints: [
            {
                type: http
                ip: 192.168.1.33
                path: /status
            }
        ]

    }
    // myself
    {
        name: myself
        endpoints: [
            {
                type: http
                port: 52022
                path: /status
            }
        ]
    }
    // ...
]
